{"version":3,"sources":["Components/search-box/index.jsx","Components/card/index.jsx","Components/card-list/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","styled","input","placeholder","onChange","type","Card","div","monster","alt","src","id","name","email","Div","monsters","map","key","App","useState","setmonsters","searchField","setSearchField","useEffect","fetch","then","response","json","filteredMonsters","filter","toLowerCase","includes","className","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yeAGA,IAAMA,EAAQC,IAAOC,MAAV,KAUI,kBAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,SAAhB,OACd,kBAACJ,EAAD,CAAOK,KAAK,SAASF,YAAaA,EAAaC,SAAUA,K,uaCX1D,IAAME,EAAOL,IAAOM,IAAV,KAkBK,kBAAGC,EAAH,EAAGA,QAAH,OACd,kBAACF,EAAD,KACC,yBAAKG,IAAI,UAAUC,IAAG,+BAA0BF,EAAQG,GAAlC,4BACtB,4BAAKH,EAAQI,MACb,2BAAIJ,EAAQK,S,0LCrBd,IAAMC,EAAMb,IAAOM,IAAV,KAQM,kBAAGQ,EAAH,EAAGA,SAAH,OACd,kBAACD,EAAD,KACEC,EAASC,KAAI,SAACR,GAAD,OACb,kBAAC,EAAD,CAAMS,IAAKT,EAAQG,GAAIH,QAASA,SCepBU,G,MAzBH,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACVJ,EADU,KACAK,EADA,OAEqBD,mBAAS,IAF9B,mBAEVE,EAFU,KAEGC,EAFH,KAIjBC,qBAAU,WACTC,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GAAD,OAAcN,EAAYM,QAC/B,IAEH,IAEME,EAAmBb,EAASc,QAAO,SAAArB,GAAO,OAC/CA,EAAQI,KAAKkB,cAAcC,SAASV,EAAYS,kBAGjD,OACC,yBAAKE,UAAU,OACd,gDACA,kBAAC,EAAD,CAAW7B,YAAY,kBAAkBC,SATpB,SAAC,GAAD,IAAE6B,EAAF,EAAEA,OAAF,OAAcX,EAAeW,EAAOC,UAUzD,kBAAC,EAAD,CAAUnB,SAAUa,OCbHO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.b92b3c7b.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Input = styled.input`\n\t-webkit-appearance: none;\n\tborder: none;\n\toutline: none;\n\tpadding: 10px;\n\twidth: 150px;\n\tline-height: 30px;\n\tmargin-bottom: 30px;\n`\n\nexport default ({ placeholder, onChange }) => (\n\t<Input type=\"search\" placeholder={placeholder} onChange={onChange} />\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Card = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tbackground-color: #95dada;\n\tborder: 1px solid grey;\n\tborder-radius: 5px;\n\tpadding: 25px;\n\tcursor: pointer;\n\t-moz-osx-font-smoothing: grayscale;\n\tbackface-visibility: hidden;\n\ttransform: translateZ(0);\n\ttransition: transform 0.25s ease-out;\n\n\t:hover {\n\t\ttransform: scale(1.05);\n\t}\n`\n\nexport default ({ monster }) => (\n\t<Card>\n\t\t<img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} />\n\t\t<h2>{monster.name}</h2>\n\t\t<p>{monster.email}</p>\n\t</Card>\n)\n","import React from 'react'\nimport styled from 'styled-components'\nimport Card from '../card'\n\nconst Div = styled.div`\n\twidth: 85vw;\n\tmargin: 0 auto;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr 1fr 1fr;\n\tgrid-gap: 20px;\n`\n\nexport default ({ monsters }) => (\n\t<Div>\n\t\t{monsters.map((monster) => (\n\t\t\t<Card key={monster.id} monster={monster} />\n\t\t))}\n\t</Div>\n)\n","import React, { useState, useEffect } from 'react'\nimport SearchBox from './Components/search-box'\nimport CardList from './Components/card-list'\nimport './App.css'\n\nconst App = () => {\n\tconst [monsters, setmonsters] = useState([])\n\tconst [searchField, setSearchField] = useState('')\n\n\tuseEffect(() => {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((response) => setmonsters(response))\n\t}, [])\n\n\tconst onSearchChange = ({target}) => setSearchField(target.value)\n\n\tconst filteredMonsters = monsters.filter(monster =>\n\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\n\t);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Monsters Rolodex</h1>\n\t\t\t<SearchBox placeholder=\"Search monsters\" onChange={onSearchChange} />\n\t\t\t<CardList monsters={filteredMonsters} />\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}